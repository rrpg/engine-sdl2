#include "Terrain.hpp"
#include <math.h>

std::unordered_map<E_TerrainType, std::vector<E_TerrainTile>> Terrain::s_mTerrainMasks = createTileMasksMap();

std::unordered_map<E_TerrainType, std::vector<E_TerrainTile>> createTileMasksMap() {
	std::unordered_map<E_TerrainType, std::vector<E_TerrainTile>> map;
	map[TERRAIN_GRASS_NORMAL] = {
		TERRAIN_GRASS_NORMAL_SINGLE,
		TERRAIN_GRASS_NORMAL_VERT_BOTTOM,
		TERRAIN_GRASS_NORMAL_HORIZ_RIGHT,
		TERRAIN_GRASS_NORMAL_BOTTOMRIGHT,
		TERRAIN_GRASS_NORMAL_HORIZ_LEFT,
		TERRAIN_GRASS_NORMAL_BOTTOMLEFT,
		TERRAIN_GRASS_NORMAL_HORIZ,
		TERRAIN_GRASS_NORMAL_BOTTOM,
		TERRAIN_GRASS_NORMAL_VERT_TOP,
		TERRAIN_GRASS_NORMAL_VERT,
		TERRAIN_GRASS_NORMAL_TOPRIGHT,
		TERRAIN_GRASS_NORMAL_RIGHT,
		TERRAIN_GRASS_NORMAL_TOPLEFT,
		TERRAIN_GRASS_NORMAL_LEFT,
		TERRAIN_GRASS_NORMAL_TOP,
		TERRAIN_GRASS_NORMAL_CENTER
	};
	map[TERRAIN_SOIL_NORMAL] = {
		TERRAIN_SOIL_NORMAL_SINGLE,
		TERRAIN_SOIL_NORMAL_VERT_BOTTOM,
		TERRAIN_SOIL_NORMAL_HORIZ_RIGHT,
		TERRAIN_SOIL_NORMAL_BOTTOMRIGHT,
		TERRAIN_SOIL_NORMAL_HORIZ_LEFT,
		TERRAIN_SOIL_NORMAL_BOTTOMLEFT,
		TERRAIN_SOIL_NORMAL_HORIZ,
		TERRAIN_SOIL_NORMAL_BOTTOM,
		TERRAIN_SOIL_NORMAL_VERT_TOP,
		TERRAIN_SOIL_NORMAL_VERT,
		TERRAIN_SOIL_NORMAL_TOPRIGHT,
		TERRAIN_SOIL_NORMAL_RIGHT,
		TERRAIN_SOIL_NORMAL_TOPLEFT,
		TERRAIN_SOIL_NORMAL_LEFT,
		TERRAIN_SOIL_NORMAL_TOP,
		TERRAIN_SOIL_NORMAL_CENTER
	};
	map[TERRAIN_ROCK_NORMAL] = {
		TERRAIN_ROCK_NORMAL_SINGLE,
		TERRAIN_ROCK_NORMAL_VERT_BOTTOM,
		TERRAIN_ROCK_NORMAL_HORIZ_RIGHT,
		TERRAIN_ROCK_NORMAL_BOTTOMRIGHT,
		TERRAIN_ROCK_NORMAL_HORIZ_LEFT,
		TERRAIN_ROCK_NORMAL_BOTTOMLEFT,
		TERRAIN_ROCK_NORMAL_HORIZ,
		TERRAIN_ROCK_NORMAL_BOTTOM,
		TERRAIN_ROCK_NORMAL_VERT_TOP,
		TERRAIN_ROCK_NORMAL_VERT,
		TERRAIN_ROCK_NORMAL_TOPRIGHT,
		TERRAIN_ROCK_NORMAL_RIGHT,
		TERRAIN_ROCK_NORMAL_TOPLEFT,
		TERRAIN_ROCK_NORMAL_LEFT,
		TERRAIN_ROCK_NORMAL_TOP,
		TERRAIN_ROCK_NORMAL_CENTER
	};
	return map;
}

void Terrain::setFlags(unsigned int flags) {
	m_iFlags = flags;
}

bool Terrain::hasFlag(unsigned int flag) {
	return (m_iFlags & flag) == flag;
}

E_TerrainTile Terrain::getTerrainTile(E_TerrainType type, int index) {
	return s_mTerrainMasks[type][(size_t) index];
}
